插入区间

 描述
 笔记
 数据
 评测
给出一个无重叠的按照区间起始端点排序的区间列表。

在列表中插入一个新的区间，你要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。

您在真实的面试中是否遇到过这个题？ Yes
样例
插入区间[2, 5] 到 [[1,2], [5,9]]，我们得到 [[1,9]]。

插入区间[3, 4] 到 [[1,2], [5,9]]，我们得到 [[1,2], [3,4], [5,9]]。
注意细节问题，覆盖插入后，可能继续覆盖下一个区间
比如插入[2,6]到[[1,2],[4,9]，[11,13]] ,得到的是[[1,9],[11,13]]
 vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
        // write your code here
        if(intervals.size()==0) return {newInterval};
        int i,p=0;
        for( i=0;i<intervals.size();++i){
            if(com(intervals[i],newInterval)==1) continue;
            if(com(intervals[i],newInterval)==-1) break;
            if(com(intervals[i],newInterval)==0)
            {
             /* intervals[i].start=min(intervals[i].start,newInterval.start);
               intervals[i].end=max(intervals[i].end,newInterval.end);
               while(i<intervals.size()-1&&intervals[i].end>intervals[i+1].end){
                   intervals.erase(intervals.begin()+i+1);++i;
               }
               if(i+1<intervals.size()&&intervals[i].start<intervals[i+1].start)
               intervals[i].end=intervals[i+1].end;
               intervals.erase(intervals.begin()+i+1);
               return intervals;*/
               newInterval.start=min(intervals[i].start,newInterval.start);
               newInterval.end=max(intervals[i].end,newInterval.end);
               //intervals.erase(intervals.begin()+i);--i;将一个个删除改进为一次性删除
            ++p;
            }            
        }       
        intervals.insert(intervals.begin()+i,newInterval);
        if(p>0) intervals.erase(intervals.begin()+i-p,intervals.begin()+i);
        return intervals;
    }
    int com(Interval m,Interval n){
        if(m.start>n.end) return -1;//n在m前面，无交叠
        if(m.end<n.start) return 1;//m在n前面，无交叠
        return 0;
    }
